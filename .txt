const express = require('express');
const mongoose = require('mongoose');
const app = express();
const connection = require('./db/db.js');
const router=require('./routes/slot.route.js')

app.use(express.json());

app.use('/api',router);

app.listen(5200, async (req, res) => {
    try {
        await connection;
        console.log("Server is running on 5200")
    } catch (error) {
        console.log(error)
    }
})
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();



const connection = mongoose.connect(process.env.MONGO_URL)
    .then(() => console.log("DB connected successfully")).catch((err) => {
        console.log(err)
    })


module.exports = connection;

const mongoose=require('mongoose');

const bookingSchema = new mongoose.Schema({
    date: { type: String, required: true },
    slot: { type: String, required: true },
    userId: { type: String, required: true },
    bookedAt: { type: Date, default: Date.now }
  });
  
  const Booking = mongoose.model('Booking', bookingSchema);

  module.exports=Booking;

  const express=require('express');
const router=express.Router();
const Booking=require("../model/slot.model.js")

// Generate slots for a specific date (in 30-minute intervals)
function generateSlots(date) {
    let slots = [];
    let startTime = moment(date).startOf('day');
    let endTime = moment(date).endOf('day');
  
    while (startTime <= endTime) {
      slots.push(startTime.format('HH:mm'));
      startTime.add(30, 'minutes');
    }
  
    return slots;
  }
  
  // Get Available Slots
  async function getAvailableSlots(date) {
    const slots = generateSlots(date);
    const existingBookings = await Booking.find({ date }).select('slot');
  
    return slots.map(slot => {
      const isBooked = existingBookings.some(booking => booking.slot === slot);
      return { slot, available: !isBooked };
    });
  }
  
  // Endpoint to get available slots for a given date
  router.get('/slots', async (req, res) => {
    try {
      const { date } = req.query;
  
      if (!date || !moment(date, 'YYYY-MM-DD', true).isValid()) {
        return res.status(400).json({ error: 'Invalid date format. Use YYYY-MM-DD.' });
      }
  
      const availableSlots = await getAvailableSlots(date);
      const currentDate = moment().format('YYYY-MM-DD');
  
      // Disable slots for today that have passed the current time
      if (date === currentDate) {
        const currentTime = moment().format('HH:mm');
        availableSlots.forEach(slot => {
          if (moment(slot.slot, 'HH:mm').isAfter(currentTime)) {
            slot.available = false;
          }
        });
      }
  
      return res.status(200).json(availableSlots);
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });
  
  // Endpoint to book a slot
  router.post('/bookSlot', async (req, res) => {
    try {
      const { date, slot, userId } = req.body;
  
      if (!date || !slot || !userId) {
        return res.status(400).json({ error: 'Missing required fields.' });
      }
  
      // Check if the slot format is valid
      if (!moment(slot, 'HH:mm', true).isValid()) {
        return res.status(400).json({ error: 'Invalid slot format. Use HH:mm.' });
      }
  
      // Check if the slot is already booked
      const existingBooking = await Booking.findOne({ date, slot });
      if (existingBooking) {
        return res.status(400).json({ error: 'Slot already booked.' });
      }
  
      // Create a new booking
      const booking = new Booking({ date, slot, userId });
      await booking.save();
  
      return res.status(200).json({ success: 'Slot successfully booked.' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  module.exports=router;